# Common Workflow
acworkflow.workflow.view.home=agorum core workflow 3.0
acworkflow.workflow.view.home.short=workflow 3.0
acworkflow.workflow.workflow.product=workflow
acworkflow.workflow.workflow=Workflow
acworkflow.workflow.step=Process step
acworkflow.workflow.process=Process
acworkflow.workflow.step.internal=Process step (internal)
acworkflow.workflow.process.internal=Prozess (internal)
acworkflow.workflow.process.status=Status
acworkflow.workflow.process.endDate=Finished on
acworkflow.workflow.assignee=Assignee
acworkflow.workflow.assignees=Assignees
acworkflow.workflow.interaction=Interaction
acworkflow.workflow.manuallyStartable=Can be started directly
acworkflow.workflow.needsAttachment=Requires an attachment

# Workflow library
acworkflow.library.error.workflowNotFound=The given workflow definition "$1" cannot be found
acworkflow.library.error.noWorkflowDefinition=The given object "$1" is not a workflow definition

# Workflow Filter
acworkflow.js.workflow.agorumCoreWorkflow=agorum core workflow
acworkflow.js.workflow.workflowDev=Workflow development
acworkflow.js.workflow.myworkflows=My workflows
acworkflow.js.workflow.myworkflows.assigned=for me
acworkflow.js.workflow.myworkflows.acquired=in process (mine)
acworkflow.js.workflow.myworkflows.viewing=in observation (mine)
acworkflow.js.workflow.workflows.notAcquired=not acquired
acworkflow.workflow.filter.otherAssignee=other user (choose)
acworkflow.js.workflow.user=User
acworkflow.js.workflow.definition=Definition
acworkflow.js.workflow.instance=Instance
acworkflow.js.workflow.log=Log

# Node "delay"
acworkflow.node.delay.error.noNumberSeconds=The definition of the parameter seconds does have to be a number
acworkflow.node.delay.error.noNumberMinutes=The definition of the parameter minutes does have to be a number
acworkflow.node.delay.error.noNumberHours=The definition of the parameter hours does have to be a number
acworkflow.node.delay.error.noNumberDays=The definition of the parameter days does have to be a number
acworkflow.node.delay.error.noNumberMonths=The definition of the parameter months does have to be a number
acworkflow.node.delay.error.noNumberYears=The definition of the parameter years does have to be a number

# Node "collect"
acworkflow.node.collect.noDistribute=Please ensure that there was a distribute before collecting
acworkflow.node.collect.error.noNumberDone=The definition of the parameter "Tokens done" does have to be a number
acworkflow.node.collect.error.noNumberOpen=The definition of the parameter "Open tokens" does have to be a number
acworkflow.node.collect.error.NoIntoParameter=Cannot collect tokens distributed without an "into" parameter

# Node "join"
acworkflow.node.join.error.noFork=Please ensure that there was a fork before joining
acworkflow.node.join.error.noNumberDone=The definition of the parameter "Tokens done" does have to be a number
acworkflow.node.join.error.noNumberOpen=The definition of the parameter "Open tokens" does have to be a number

# Metadata
acworkflow.metadata.workflowConfiguration=Workflow configuration
acworkflow.metadata.workflowGroup=Workflow groups
acworkflow.metadata.componentType=Component
acworkflow.metadata.attachedObjects=Attached objects
acworkflow.metadata.logEntry=Log entry
acworkflow.metadata.resubmitDate=Resubmit date
acworkflow.metadata.description=Description
acworkflow.metadata.attachmentPermissionAll=Full access attachments
acworkflow.metadata.attachmentPermissionWrite=Write access attachments
acworkflow.metadata.attachmentPermissionRead=Read access attachments
acworkflow.metadata.attachmentPermissionCheckout=Checkout attachments
acworkflow.metadata.attachmentPermissionProtected=Protected attachments

# Handler Error Message
acworkflow.js.dataHandler.notSupportedHandler=Only function "$1" is supported
acworkflow.js.dataHandler.type.group=Group
acworkflow.js.dataHandler.type.user=User

# Fill variable
acworkflow.js.fill.errorFillingVariables=There was an error filling variables. Error: $1
acworkflow.js.fill.errorLibrary=There was an error in the library. Error: $1

# Runtime
acworkflow.js.runtime.parseErrorConfiguration=Error parsing configuration "$1" in line "$2" with error "$3"
acworkflow.js.runtime.errorDefinitionNotFound=Definition with name "$1" can not be found in the workflow definition
acworkflow.js.runtime.errorCreateTokenNoTarget=To create a new token please provide the target directory
acworkflow.js.runtime.transactionRolledBack=Workflow transaction rolled back

# View
acworkflow.js.view.workflow=Workflow
acworkflow.js.view.ok=OK
acworkflow.js.view.name=Name
acworkflow.js.view.owner=Owner
acworkflow.js.view.lastModifier=Last modifier
acworkflow.js.view.lastModifyDate=Last modify date
acworkflow.js.view.createDate=Create date
acworkflow.js.view.fileSize=File size
acworkflow.js.view.pleaseWait=Please wait...
acworkflow.js.view.noWorkflowStep=No workflow step
acworkflow.js.view.take=Take over
acworkflow.js.view.giveAway=Give away
acworkflow.js.view.takeIt=Take
acworkflow.js.view.anotherUser=Another user already assigned to the workflow
acworkflow.js.view.changes=Change history
acworkflow.js.view.save=Save
acworkflow.js.view.notAssignee=You are not the assignee of the workflow
acworkflow.js.view.dateFormat=yyyy/MM/dd HH:mm:ss

# Logviewer
acworkflow.js.logviewer.technicalView=Technical view
acworkflow.js.logviewer.comparisonView=Comparison view
acworkflow.js.logviewer.dateFormat=yyyy/MM/dd HH:mm:ss
acworkflow.js.logviewer.errorWrongType=The object type of the provided id "$1" is not an object of the workflow runtime. Expected are "Workflow directory (acwf)", "Workflow token (acwt)", "Workflow log (acwl)" or "Workflow instance (acwi)"
acworkflow.js.logviewer.titleWrongType=Invalid object type
acworkflow.js.logviewer.titleErrorReadLogEntries=Error reading log entries
acworkflow.js.logviewer.titleErrorReadWorkflowDefinition=Error reading workflow definition
acworkflow.js.logviewer.errorNoDefinition=No workflow definition found for provided log file
acworkflow.js.logviewer.titleMissingId=Missing id
acworkflow.js.logviewer.errorMissingId=Please provide the id of the log in the parameter "id"
acworkflow.js.logviewer.logEntries=Log entries
acworkflow.js.logviewer.token=Token
acworkflow.js.logviewer.node=Node
acworkflow.js.logviewer.actionDate=Action date
acworkflow.js.logviewer.errorNoLog=Log file can not be found
acworkflow.js.logviewer.flowChart.title=Token flow chart
acworkflow.js.logviewer.data.title=Data
acworkflow.js.logviewer.pleaseWait=Please wait

# Logviewer technical view
acworkflow.js.logviewtechnical.pleaseWait=Please wait...
acworkflow.js.logviewtechnical.noStepUi=Step ui could not be loaded due faulty ui definition
acworkflow.js.logviewtechnical.stepUi=Step ui
acworkflow.js.logviewtechnical.instanceInformation=Instance information
acworkflow.js.logviewtechnical.tokenInformation=Token information

# Logviewer comparison view
acworkflow.js.logviewcomparison.variable=Variable
acworkflow.js.logviewcomparison.changedBy=Changed by
acworkflow.js.logviewcomparison.previousValue=Previous value
acworkflow.js.logviewcomparison.currentValue=Current value
acworkflow.js.logviewcomparison.variableScope=Variable scope
acworkflow.js.logviewcomparison.changeType=Change type
acworkflow.js.logviewcomparison.changeInitiator=Change initiator
acworkflow.js.logviewcomparison.name=Name
acworkflow.js.logviewcomparison.owner=Owner
acworkflow.js.logviewcomparison.lastModifier=Last modifier
acworkflow.js.logviewcomparison.lastModifyDate=Last modify date
acworkflow.js.logviewcomparison.createDate=Create date
acworkflow.js.logviewcomparison.fileSize=File size
acworkflow.js.logviewcomparison.differenceData=Difference data
acworkflow.js.logviewcomparison.errorStepUi=Step ui could not be loaded due faulty ui definition
acworkflow.js.logviewcomparison.noAssignee=No assignee or assignee information is confidental
acworkflow.js.logviewcomparison.noStepUi=No step ui
acworkflow.js.logviewcomparison.noAttachment=No attachment or attachment is invalid
acworkflow.js.logviewcomparison.dateFormat=yyyy/MM/dd HH:mm:ss
acworkflow.js.logviewcomparison.pleaseWait=Please wait...

#Workflow repository
acworkflow.repository.load.objectNotFound=The provided id "$1" can not be found. Please ensure that you only provide existing ids
acworkflow.repository.save.objectNotFound=The provided id "$1" can not be found. Please ensure that you only provide existing ids
acworkflow.repository.set.keyStringError=The parameter key has to be of type string
acworkflow.repository.note.messageStringError=The parameter "message" has to be of type string
acworkflow.repository.note.targetNotFound=Target object can not be found

# configuration widgets (nodes)
# User/Group widget
acworkflow.js.assign.usergroupconfigelement.userGroup=User/Group
acworkflow.js.assign.usergroupconfigelement.attachment=Attachment permissions
acworkflow.js.assign.usergroupconfigelement.define=Set user/group assignment

# Assign configuration widget
acworkfloweditor.js.assignconfigurationaon.assignee=User/Groups (Editor)
acworkfloweditor.js.assignconfigurationaon.assignee.help=The module assigns the defined users and groups to the passing token. If a user or group is assigned to a token, the assigned user can see the token and therefore the workflow and work with it. In addition to the access to the token, the assignment also gives access to the attachments of the token, which were assigned to the token at the time of the assignment.<br/><br/> If individual users are assigned, then a separate group is created for the user, the user to be authorized is added and then the group of the user is assigned to the workflow. This way of assigning users ensures that substitutions can be entered for the user's permissions and that the workflow can be continued even if the user is absent.<br/><br/>If the assignment was made, then the assignment is available on the token until another assignment is made to this token in the workflow. This logic is also valid for tokens, which result from the authorized token when using the blocks "Fork" and "Distribute".<br/><br/>If the logic of the block was executed without errors, the block is left by the default endpoint. The workflow is continued on the following path.
acworkfloweditor.js.assignconfigurationaon.assigneeLabel=User/Groups
acworkfloweditor.js.assignconfigurationaon.attachmentLabel=Attachment rights
# Viewer configuration widget
acworkfloweditor.js.assignconfigurationaon.viewer=Users/Groups (Viewer)
acworkfloweditor.js.assignconfigurationaon.viewer.help=Here you can also assign users/groups who can see the workflow step but are not actively assigned to it.
acworkfloweditor.js.assignconfigurationaon.viewerLabel=Users/Groups

# Collect configuration widget
acworkfloweditor.js.collectconfigurationaon.open=Open tokens
acworkfloweditor.js.collectconfigurationaon.done=Tokens done
acworkfloweditor.js.collectconfigurationaon.open.help=Basically, this block must be preceded by the "distribute" block, otherwise the use of the block is invalid. The agorum core workflow indicates this fact with an error in addition to the runtime, if the agorum core workflow recognizes that the basic requirement is not met.<br/><br/>If the requirements are met, then incoming tokens are combined into a token again when the module is reached. In principle, however, the workflow is not continued until all tokens have reached the block, as configured at the time the workflow was created. If the reached quantity of returning tokens has not yet been reached, then the information of the incoming token, i.e. all local variables, are kept in the POU. In addition, the information is not only stored, but also combined with the information of the other, already received tokens. If all information is queried from the token, the token is deleted and is no longer available for the workflow.<br/><br/>If the token is received, which reaches the defined amount of decreasing tokens, the information of the incoming token is also read and combined with the existing information. The workflow is then continued with this token. Tokens that are at this point in time still concurrent and should actually have passed the module are deleted before continuing in the workflow. Any information stored there will be read out during this process and combined with the existing information to avoid data loss of any stored information.<br/><br/>The parameter "Open Tokens" defines the behavior of the POU at runtime of the workflow. The open tokens indicate how many tokens must still be present in the workflow at this point so that the workflow is continued at this point with the next incoming token. Negative numbers are not marked as errors by the editor, but at runtime this means that the POU does not wait for further tokens, but continues the workflow immediately upon receipt of a token, usually the first.
acworkfloweditor.js.collectconfigurationaon.done.help=Basically, this block must be preceded by the "distribute" block, otherwise the use of the block is invalid. The agorum core workflow indicates this fact with an error in addition to the runtime, if the agorum core workflow recognizes that the basic requirement is not met.<br/><br/>If the requirements are met, then incoming tokens are combined into a token again when the module is reached. In principle, however, the workflow is not continued until all tokens have reached the block, as configured at the time the workflow was created. If the reached quantity of returning tokens has not yet been reached, then the information of the incoming token, i.e. all local variables, are kept in the POU. In addition, the information is not only stored, but also combined with the information of the other, already received tokens. If all information is queried from the token, the token is deleted and is no longer available for the workflow.<br/><br/>If the token is received, which reaches the defined amount of decreasing tokens, the information of the incoming token is also read and combined with the existing information. The workflow is then continued with this token. Tokens that are at this point in time still concurrent and should actually have passed the module are deleted before continuing in the workflow. Any information stored there will be read out during this process and combined with the existing information to avoid data loss of possibly stored information.<br/><br/>The parameter "Completed tokens" defines the behavior of the block at runtime of the workflow. The completed tokens indicate how many tokens must already have been received in the block so that the workflow is continued at this point with the next incoming token. Negative numbers are not marked as errors by the editor, but at runtime this means that the POU does not wait for further tokens, but continues the workflow immediately upon receipt of a token, usually the first.

# Condition configuration widget
acworkfloweditor.js.conditionconfigurationaon.condition=Condition
acworkfloweditor.js.conditionconfigurationaon.condition.help=If the block is used in a workflow, the further path for processing can be influenced at runtime of the workflow, i.e. which endpoint is used (true or false).<br/><br/>The parameter "condition" defines the condition for the block to be evaluated at runtime. The condition can be a fixed value so that the workflow can be validated immediately. The condition can also be fetched from a variable of the workflow or from an inline JavaScript. To do so, switch the editor in the upper right corner.<br/><br/>If the condition is loaded from a variable, it is checked whether the value of the variable is either true or false. You can also check if the variable is defined in the workflow.<br/><br/>If the condition is fetched from an inline JavaScript, the JavaScript is interpreted and the result of the JavaScript is checked if it is true or false.

# Decision configuration widget
acworkfloweditor.js.decisionconfigurationaon.decision=Decision
acworkfloweditor.js.decisionconfigurationaon.decision.help=If the module is used in a workflow, the further path for processing can be influenced at workflow runtime. In other words, which outlet endpoint is addressed.<br/><br/> Basically, the decision is made based on the defined endpoints. The value of the information source is compared with the names of the defined endpoints. If the value matches the name of an endpoint, the block is left by this endpoint and the decision is made. If no endpoint is found whose name matches the value from the information source, then the default endpoint is called. If this endpoint is not connected to another block, the token is terminated and is no longer available to the workflow.<br/><br/>In the parameter "decision" the data source is stored that is to be used for the decision or the decision making. Fixed values can be entered to cause the workflow to always address the same endpoint. However, variables or inline JavaScript can also be specified to make the decision dynamically at runtime.

# Delay configuration widget
acworkfloweditor.js.delayconfigurationaon.seconds=Seconds
acworkfloweditor.js.delayconfigurationaon.minutes=Minutes
acworkfloweditor.js.delayconfigurationaon.hours=Hours
acworkfloweditor.js.delayconfigurationaon.days=Days
acworkfloweditor.js.delayconfigurationaon.months=Months
acworkfloweditor.js.delayconfigurationaon.years=Years

# Distribute configuration widget
acworkfloweditor.js.distributeconfiguration.distribute=From variable
acworkfloweditor.js.distributeconfiguration.into=Into variable
acworkfloweditor.js.distributeconfiguration.distribute.help=The parameter "From Variable" specifies the variable from which the data array should be read at runtime. This parameter is mandatory because the information for further processing is read from the variable. The name of a variable can be entered. The block takes over the resolution of the variable at runtime of the workflow. At this time the variable with the specified name must also be available in the workflow.
acworkfloweditor.js.distributeconfiguration.into.help=The "In Variable" parameter specifies the variable to which the information should be written when the token is split. The name of the variable is specified, which is then created by the block in the respective token at runtime. The content of the variable depends on the entry from the data array loaded from the variable specified under the "From Variable" parameter. If the name of the variable is not specified, the information is written directly under the variables of the token.

# Join configuration widget
acworkfloweditor.js.joinconfigurationaon.open=Open tokens
acworkfloweditor.js.joinconfigurationaon.done=Tokens done
acworkfloweditor.js.joinconfigurationaon.open.help=The parameter "Open Tokens" defines the behavior of the node at runtime of the workflow. The open tokens specify how many tokens must still be present in the workflow so that the workflow is continued at this point with the next incoming token. Negative numbers are not marked as errors by the editor, but at runtime this means that the node does not wait for further tokens, but continues the workflow immediately upon receipt of a token, usually the first one. More details under <a target="_blank" href="${helplink:2218ce00-16a4-11ea-9b90-005056aa0ecc}">join - agorum core workflow</a>
acworkfloweditor.js.joinconfigurationaon.done.help=The parameter "Completed tokens" defines the behavior of the node at runtime of the workflow. The completed tokens specify how many tokens must already have been received in the node so that the workflow is continued at this point with the next incoming token. Negative numbers are not marked as errors by the editor, but at runtime this means that the node does not wait for further tokens, but continues the workflow immediately upon receipt of a token, usually the first one. More details under <a target="_blank" href="${helplink:2218ce00-16a4-11ea-9b90-005056aa0ecc}">join - agorum core workflow</a>


# Load configuration widget
acworkfloweditor.js.loadconfigurationaon.from=From
acworkfloweditor.js.loadconfigurationaon.filter=Filter
acworkfloweditor.js.loadconfigurationaon.into=Into variable
acworkfloweditor.js.loadconfigurationaon.from.help=The "Source" parameter defines the objects from which the metadata should be read. You can manually enter IDs, UUIDs or complete paths to existing objects in agorum core or select them via the information center. The selection can be opened by a single click on the button with the "...". If the selected object should be deleted from the field, this can be done by a simple click on the button with the "..." symbol. Several objects can be processed simultaneously. To make more objects available, click on the button with the "Plus" symbol. If you want to remove a selected object from the list of source objects, click on the button with the "trashcan" symbol at the height of the selected line.<br/><br/>It is also possible to get the objects from a variable or an inline JavaScript. The return value must be an array of strings containing the different objects.<br/><br/>If the input of the source is left empty or the list contains only an empty line, then no source has been defined and at runtime the attachments of the passing token are used.
acworkfloweditor.js.loadconfigurationaon.filter.help=The "Filter" parameter defines a filtering of the collected metadata of the objects from the "Source" parameter. Several different filters can be specified, which are executed one after the other at runtime. For each defined line either a fixed value can be entered, i.e. a name of a variable or the name of a metadata or a regular expression. A new filter can be added using the button with the "plus" icon. An existing filter entry can be deleted with the button with the "trashcan" icon, on the same line of the entry to be deleted.<br/><br/>It is also possible to get the filter definition from a variable or an inline JavaScript. The return value must be an array of strings containing the different filter definitions. To do this, simply switch to the respective editor in the upper right corner.<br/><br/>If the input of the filter is left empty or the list contains only one empty line, then no filter has been defined and at runtime the collected information is written completely to the target objects.
acworkfloweditor.js.loadconfigurationaon.into.help=The parameter "Target Variable" expects the name of a variable in which all read and filtered metadata should be stored. There are no restrictions for the selection or input of the name. Variable and inline JavaScript definitions are also supported. Simply switch to the respective editor in the upper right corner.<br/><br/>If the input remains empty, a separate variable is created for each metadata at runtime.

# Note configuration widget
acworkfloweditor.js.noteconfigurationaon.recipients=Recipients
acworkfloweditor.js.noteconfigurationaon.resolveRecipients=Use a variable or an inline JavaScript
acworkfloweditor.js.noteconfigurationaon.target=Target object
acworkfloweditor.js.noteconfigurationaon.targetResolve=Use a variable or an inline JavaScript
acworkfloweditor.js.noteconfigurationaon.message=Message

# Save configuration widget
acworkfloweditor.js.saveconfigurationaon.from=Source variable
acworkfloweditor.js.saveconfigurationaon.filter=Filter
acworkfloweditor.js.saveconfigurationaon.into=Target objects
acworkfloweditor.js.saveconfigurationaon.from.help=The "Source Variable" parameter specifies the workflow variable from which the information is to be read, which is then written to the target objects as metadata. If a variable is specified, the value of the variable must have a special format. The format must be a map of key and value pairs. The key must be the name of the metadata in which the value of the pair is to be written.<br/><br/>No name is given, so if the field remains empty or is deleted, then all variables of the workflow are used at runtime. The name of the respective variable is then used as metadata and the respective value of the variable as the value for the new variable.<br/><br/>The input of a variable definition or an inline JavaScript is allowed and must provide the name of a variable of the workflow as result. For this purpose, the editor is simply switched in the upper right corner. Otherwise, the module may not be able to read any information at runtime.
acworkfloweditor.js.saveconfigurationaon.filter.help=The "Filter" parameter defines a filtering of the collected information from the "Source Variable" parameter. Several different filters can be specified, which are executed one after the other at runtime. For each defined line either a fixed value can be entered, i.e. a name of a variable or the name of a metadata or a regular expression. A new filter can be added using the button with the "plus" icon. An existing filter entry can be deleted with the button with the "trashcan" icon, on the same line of the entry to be deleted.<br/><br/>It is also possible to get the filter definition from a variable or an inline JavaScript. The return value must be an array of strings containing the different filter definitions.<br/><br/>If the filter input is left empty or the list contains only one empty line, then no filter has been defined and at runtime the collected information is written completely to the target objects.
acworkfloweditor.js.saveconfigurationaon.into.help=The parameter "Target objects" specifies the objects on which the variables and thus the metadata should be written. If nothing is entered into this parameter or the list consists either of no entry or only of empty entries, the current attachments of the workflow or the token are used at runtime of the POU.<br/><br/>Either the ID, UUID or the path of the object to which the information is to be saved can be entered per line. In addition, the entries can also be searched and selected via information center. To open the information center you have to click once on the button with the "...". If you want to delete the selected or entered content, you can empty the selection or the entry with a single click on the "trashcan" symbol. New entries can be added by clicking the button with the "Plus" symbol. Entries that are no longer needed can be deleted with the button with the "trashcan" symbol, on the same line of the entry to be deleted.<br/><br/>It is also possible to get the target objects from a variable or an inline JavaScript. The return value must be an array of strings containing the different target objects.

# Script configuration widget
acworkfloweditor.js.scriptconfiguration.valueArray=The value is an array.
acworkfloweditor.js.scriptconfiguration.valueObject=The value is an object.
acworkfloweditor.js.scriptconfiguration.rawEditor=Please edit with raw editor.
acworkfloweditor.js.scriptconfiguration.errorKey=Key already exists. Please use another key
acworkfloweditor.js.scriptconfiguration.errorBrackets=All opening brackets should be closed
acworkfloweditor.js.scriptconfigurationaon.key=Key
acworkfloweditor.js.scriptconfigurationaon.value=Value

# Set configuration widget
acworkfloweditor.js.setconfigurationaon.key=Key
acworkfloweditor.js.setconfigurationaon.value=Value
acworkfloweditor.js.setconfigurationaon.global=Global
acworkfloweditor.js.setconfigurationaon.global.text=Set value globally
acworkfloweditor.js.setconfigurationaon.key.help=The "Key" parameter specifies the name of the variable to be filled with a value via this block. You can enter letters and numbers. However, there is no restriction in the input options.
acworkfloweditor.js.setconfigurationaon.value.help=The "Value" parameter specifies the value for the variable. The value of the parameter "Value" can be chosen arbitrarily. The editor supports you in entering simple string values. If more complex structures or values are to be entered, you can either use the "Raw" area of the parameter in the workflow editor or alternatively, if the information is also available at the time of workflow execution, via a variable or inline JavaScript definition.<br/><br/>If no value is entered in this parameter, it is treated as a "null" value and the variable is deleted by the agorum core workflow.
acworkfloweditor.js.setconfigurationaon.global.help=The "Global" parameter defines whether the variable as well as the value should be handled globally. In the standard system, the variables that are processed via this block are handled locally. That means only on the token, which passed this block. However, there are cases in which global variables may want to be processed.

# Ui configuration widget
acworkfloweditor.js.uiconfigurationaon.assignee=User/Group
acworkfloweditor.js.uiconfigurationaon.assignee.label=User/Group (Editor)
acworkfloweditor.js.uiconfigurationaon.viewer=User/Group
acworkfloweditor.js.uiconfigurationaon.viewer.label=User/Group (Viewer)
acworkfloweditor.js.uiconfigurationaon.attachmentPermission=Attachment permission
acworkfloweditor.js.uiconfigurationaon.aguila=UI script
acworkfloweditor.js.uiconfigurationaon.assignee.help=You can select users and groups that are authorized for this block. These users and groups are granted access to the workflow and the associated resources and information for this module. If the assignments are not changed after this step (assign node), the users and groups assigned in this block still have access to the workflow after this block.<br/><br/>In addition, access to the attachments can be controlled per authorized user or group. By default, users and groups are assigned read access to the attachments. However, this can be adjusted during the assignment by selecting "Attachment permission".<br/><br/>Users and groups can be added using the button with the plus symbol and removed using the button with the trashcan symbol. The button for adding can be found in the upper right corner of the parameter editor. The button for removing users and groups from the assignment can be found on the respective line of the user or group.<br/><br/>If the information for the authorization or assignment should only be available at runtime, this can be done via a workflow variable or JavaScript expression.
acworkfloweditor.js.uiconfigurationaon.viewer.help=Here you can also assign users/groups who can see the workflow step but are not actively assigned to it.
acworkfloweditor.js.uiconfigurationaon.aguila.help=A great feature of this module is the ability to interrupt the workflow and present the user with an input mask or interface. This interface is provided by the module itself and informs the agorum core workflow Runtime that the interface must now be displayed. The workflow editor offers the possibility to create and edit the interface so that the module can provide the interface at runtime.<br/><br/>Aguila is supported as the framework for the interface. JavaScript is used as the programming language.<br/><br/> In principle all tools from agorum core are available for the development of the interface. Please note that the manipulation of objects via the workflow interface is not allowed. Within the workflow, the interface is only responsible for collecting information from users. Further processing of the collected data is done by the workflow. Even if it is technically possible, best practices do not provide for it. Also, if the best practices are disregarded, it cannot be ruled out that undesirable side effects may occur.
acworkfloweditor.js.uiconfigurationaon.outletVariable=Outlet variable
acworkfloweditor.js.uiconfigurationaon.outletVariable.help=If an outlet variable is defined, the UI node will not be left via the defined outlet specified by "leave". Instead, the outlet is stored in the variable defined in "outletVariable" and the UI node is left via the "default" outlet. A node behind it can then use this variable to react to it.
acworkfloweditor.js.uiconfigurationaon.displayName=Display name
acworkfloweditor.js.uiconfigurationaon.displayName.help=Here you can set a dynamic display name. If this is not defined, the display name is used under "General".
acworkfloweditor.js.uiconfigurationaon.events=Events
acworkfloweditor.js.uiconfigurationaon.events.help=The events script is called when the following actions are performed in the UI step: Take over (acquire), Give away (release), Save (save), Leave (leave). Details are defined in the script template.


# Script configuration widget
acworkfloweditor.js.scriptconfigurationaon.enter=Enter script
acworkfloweditor.js.scriptconfigurationaon.update=Update script
acworkfloweditor.js.scriptconfigurationaon.enter.help=If the block is passed in a workflow, the script defined as Enter script is executed. If the script does not leave the node, the workflow is put into a wait state. This wait state is similar to the state reached by using the UI block or the Wait or Delay block. It can only be resolved by an external call of the token.
acworkfloweditor.js.scriptconfigurationaon.update.help=When a wait state is resolved that was triggered by this block, the script defined as the update script is executed. If the node is not left by the update script either, the block is put back into a wait state and the resolution starts again from the beginning.

# configuration script editor
acworkfloweditor.js.configuration.scripteditor.add=Create script
acworkfloweditor.js.configuration.scripteditor.load=Load script
acworkfloweditor.js.configuration.scripteditor.delete=Delete script
acworkfloweditor.js.configuration.scripteditor.run=Run script
acworkfloweditor.js.configuration.scripteditor.open=Edit script in new tab
acworkfloweditor.js.configuration.scripteditor.scriptDeleteTitle=Attention
acworkfloweditor.js.configuration.scripteditor.scriptDeleteText=Do you really want to delete the script? (The script will only be deleted when the workflow is saved)
acworkfloweditor.js.configuration.scripteditor.searchScript=Search
acworkfloweditor.js.configuration.scripteditor.pickScript=Folder selection
acworkfloweditor.js.configuration.scripteditor.close=Close
acworkfloweditor.js.configuration.scripteditor.notMyScript=This script is an external script and therefore cannot be edited directly: "$1"

# Wait configuration widget
acworkfloweditor.js.waitconfigurationaon.resolve=Use a variable or an inline JavaScript
acworkfloweditor.js.waitconfigurationaon.targetDate=Target date
acworkfloweditor.js.waitconfigurationaon.targetDate.help=/agorum/roi/customers/acworkflow/repository/agorum/flow/wait/en.html

# comment
agorum.workflow.node.comment.description=Use this node to add comments to the process diagram.

# node groups
agorum.workflow.node.group.data=Data
agorum.workflow.node.group.flow=Flow
agorum.workflow.node.group.interaction=Interaction
agorum.workflow.node.group.common=Common
agorum.workflow.node.group.directSubWorkflows=Associated subworkflows

# node descriptions
agorum.workflow.node.data.load.description=Load metadata of objects/attachments and use them as workflow variables.
agorum.workflow.node.data.save.description=Save workflow variables as metadata on objects/attachment.
agorum.workflow.node.data.set.description=Set workflow variables.
agorum.workflow.node.flow.collect.description=Collect variable values from a previous "distribute" node.
agorum.workflow.node.flow.condition.description=Query conditions for further flow control (if).
agorum.workflow.node.flow.decision.description=Flow control (outlets) via a workflow variable or expression.
agorum.workflow.node.flow.delay.description=Wait (days, months, years, hours, minutes, seconds).
agorum.workflow.node.flow.distribute.description=Start parallel running steps, depending on an array variable.
agorum.workflow.node.flow.fork.description=Splitting into defined parallel steps.
agorum.workflow.node.flow.join.description=Waiting for the completion of several parallel running steps that have been split over a previous "fork".
agorum.workflow.node.flow.wait.description=Waiting for a date/time.
agorum.workflow.node.interaction.assign.description=Assign users/groups for all following steps (swimlane).
agorum.workflow.node.interaction.ui.description=Input mask for users and groups.
agorum.workflow.node.script.description=Executing JavaScript.

# start workflow ui
acworkflow.js.startworkflow.description=Choose the workflow that you want to start
acworkflow.js.startworkflow.workflow=Workflow
acworkflow.js.startworkflow.cancel=Cancel
acworkflow.js.startworkflow.start=Start
acworkflow.js.startworkflow.start.locked=One moment please ...
acworkflow.js.startworkflow.load.locked=Loading workflows...
acworkflow.asa.start=Start workflow (with selected object)
acworkflow.asa.group.workflow=Workflow
acworkflow.asa.main.start=Start workflow
acworkflow.asa.group.main.workflow=Workflow

# log viewer
acworkflow.js.log.title=History
acworkflow.js.log.hide=Show history
acworkflow.js.log.show=Hide history
acworkflow.js.log.date=Time
acworkflow.js.log.active=Status
acworkflow.js.log.stepDisplayName=Step
acworkflow.js.log.assigneeFullName=Editor
acworkflow.js.log.assigneesFullName=Assigned
acworkflow.js.log.processDisplayName=Process
acworkflow.js.log.loading=Loading, please wait...
acworkflow.js.log.active.true=Active
acworkflow.js.log.active.false=Finished
acworkflow.js.log.status.active=Active
acworkflow.js.log.status.killed=Canceled
acworkflow.js.log.status.finished=Finished

#
# workflow processes
#
acworkflow.overview.processes.title=Related workflow processes
acworkflow.overview.processes.noProcesses=No linked processes available
acworkflow.overview.processes.processDisplayName=Process
acworkflow.overview.processes.status=Status
acworkflow.overview.processes.createDate=Started on
acworkflow.overview.processes.lastModifyDate=Last modified
acworkflow.process.status.active=Aktiv
acworkflow.process.status.finished=Beendet

#
# acic
#
acworkflow.workflow.acic.workflowTasks=Workflow tasks
acworkflow.workflow.acic.workflowTasksDev=Workflow tasks (dev)
acworkflow.workflow.acic.workflowProcesses=Workflow processes

# parameter
acworkflow.editor.object.placeholder=agorum core object, e.g.: /agorum/roi/Files/Demo/Welcome.pdf
acworkflow.editor.filter.placeholder=Filter on metadata name (String or Regex)
acworkflow.editor.outputVariable.placeholder=Variable name
acworkflow.editor.inputVariable.placeholder=Variable name
acworkflow.editor.variable.placeholder=Variable name
acworkflow.editor.string.placeholder=String or placeholder, z.B: ${nameOfVariable}
acworkflow.editor.positiveNumberOrEmpty.placeholder=Number > 0 or empty
acworkflow.editor.expression.condition.placeholder=Expression e.g.: token.variables.amount > 10000
acworkflow.editor.date.placeholder=Date
acworkflow.editor.text.placeholder=Text or placeholder, e.g.: ${nameOfVariable}
acworkflow.editor.expression.placeholder=Expression




