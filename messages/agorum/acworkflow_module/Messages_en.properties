# Common Workflow
acworkflow.workflow.view.home=agorum core workflow 3.0
acworkflow.workflow.view.home.short=workflow 3.0
acworkflow.workflow.workflow.product=workflow
acworkflow.workflow.workflow=Workflow
acworkflow.workflow.step=Process step
acworkflow.workflow.process=Process
acworkflow.workflow.step.internal=Process step (internal)
acworkflow.workflow.process.internal=Prozess (internal)
acworkflow.workflow.process.status=Status
acworkflow.workflow.process.endDate=Finished on
acworkflow.workflow.assignee=Assignee
acworkflow.workflow.assignees=Assignees
acworkflow.workflow.interaction=Interaction
acworkflow.workflow.manuallyStartable=Can be started directly
acworkflow.workflow.needsAttachment=Requires an attachment
acworkflow.workflow.stepDescription=Task description
acworkflow.workflow.processDescription=Process description

# Workflow library
acworkflow.library.error.workflowNotFound=The given workflow definition "$1" cannot be found
acworkflow.library.error.noWorkflowDefinition=The given object "$1" is not a workflow definition

# Workflow Filter
acworkflow.js.workflow.agorumCoreWorkflow=agorum core workflow
acworkflow.js.workflow.workflowDev=Workflow development
acworkflow.js.workflow.myworkflows=My workflows
acworkflow.js.workflow.myworkflows.assigned=for me
acworkflow.js.workflow.myworkflows.acquired=in process (mine)
acworkflow.js.workflow.myworkflows.viewing=in observation (mine)
acworkflow.js.workflow.workflows.notAcquired=not acquired
acworkflow.workflow.filter.otherAssignee=other user (choose)
acworkflow.js.workflow.user=User
acworkflow.js.workflow.definition=Definition
acworkflow.js.workflow.instance=Instance
acworkflow.js.workflow.log=Log

# Node "delay"
acworkflow.node.delay.error.noNumberSeconds=The definition of the parameter seconds does have to be a number
acworkflow.node.delay.error.noNumberMinutes=The definition of the parameter minutes does have to be a number
acworkflow.node.delay.error.noNumberHours=The definition of the parameter hours does have to be a number
acworkflow.node.delay.error.noNumberDays=The definition of the parameter days does have to be a number
acworkflow.node.delay.error.noNumberMonths=The definition of the parameter months does have to be a number
acworkflow.node.delay.error.noNumberYears=The definition of the parameter years does have to be a number

# Node "collect"
acworkflow.node.collect.noDistribute=Please ensure that there was a distribute before collecting
acworkflow.node.collect.error.noNumberDone=The definition of the parameter "Tokens done" does have to be a number
acworkflow.node.collect.error.noNumberOpen=The definition of the parameter "Open tokens" does have to be a number
acworkflow.node.collect.error.NoIntoParameter=Cannot collect tokens distributed without an "into" parameter

# Node "join"
acworkflow.node.join.error.noFork=Please ensure that there was a fork before joining
acworkflow.node.join.error.noNumberDone=The definition of the parameter "Tokens done" does have to be a number
acworkflow.node.join.error.noNumberOpen=The definition of the parameter "Open tokens" does have to be a number

# Metadata
acworkflow.metadata.workflowConfiguration=Workflow configuration
acworkflow.metadata.workflowGroup=Workflow groups
acworkflow.metadata.componentType=Component
acworkflow.metadata.attachedObjects=Attached objects
acworkflow.metadata.logEntry=Log entry
acworkflow.metadata.resubmitDate=Resubmit date
acworkflow.metadata.description=Description
acworkflow.metadata.attachmentPermissionAll=Full access attachments
acworkflow.metadata.attachmentPermissionWrite=Write access attachments
acworkflow.metadata.attachmentPermissionRead=Read access attachments
acworkflow.metadata.attachmentPermissionCheckout=Checkout attachments
acworkflow.metadata.attachmentPermissionProtected=Protected attachments

# Handler Error Message
acworkflow.js.dataHandler.notSupportedHandler=Only function "$1" is supported
acworkflow.js.dataHandler.type.group=Group
acworkflow.js.dataHandler.type.user=User

# Fill variable
acworkflow.js.fill.errorFillingVariables=There was an error filling variables. Error: $1
acworkflow.js.fill.errorLibrary=There was an error in the library. Error: $1

# Runtime
acworkflow.js.runtime.parseErrorConfiguration=Error parsing configuration "$1" in line "$2" with error "$3"
acworkflow.js.runtime.errorDefinitionNotFound=Definition with name "$1" can not be found in the workflow definition
acworkflow.js.runtime.errorCreateTokenNoTarget=To create a new token please provide the target directory
acworkflow.js.runtime.transactionRolledBack=Workflow transaction rolled back

# View
acworkflow.js.view.workflow=Workflow
acworkflow.js.view.ok=OK
acworkflow.js.view.name=Name
acworkflow.js.view.owner=Owner
acworkflow.js.view.lastModifier=Last modifier
acworkflow.js.view.lastModifyDate=Last modify date
acworkflow.js.view.createDate=Create date
acworkflow.js.view.fileSize=File size
acworkflow.js.view.pleaseWait=Please wait...
acworkflow.js.view.noWorkflowStep=No workflow step
acworkflow.js.view.take=Take over
acworkflow.js.view.giveAway=Give away
acworkflow.js.view.takeIt=Take
acworkflow.js.view.anotherUser=Another user already assigned to the workflow
acworkflow.js.view.changes=Change history
acworkflow.js.view.save=Save
acworkflow.js.view.notAssignee=You are not the assignee of the workflow
acworkflow.js.view.dateFormat=yyyy/MM/dd HH:mm:ss
acworkflow.js.view.log=Protocol (log)

# Logviewer
acworkflow.js.logviewer.technicalView=Technical view
acworkflow.js.logviewer.comparisonView=Comparison view
acworkflow.js.logviewer.dateFormat=yyyy/MM/dd HH:mm:ss
acworkflow.js.logviewer.errorWrongType=The object type of the provided id "$1" is not an object of the workflow runtime. Expected are "Workflow directory (acwf)", "Workflow token (acwt)", "Workflow log (acwl)" or "Workflow instance (acwi)"
acworkflow.js.logviewer.titleWrongType=Invalid object type
acworkflow.js.logviewer.titleErrorReadLogEntries=Error reading log entries
acworkflow.js.logviewer.titleErrorReadWorkflowDefinition=Error reading workflow definition
acworkflow.js.logviewer.errorNoDefinition=No workflow definition found for provided log file
acworkflow.js.logviewer.titleMissingId=Missing id
acworkflow.js.logviewer.errorMissingId=Please provide the id of the log in the parameter "id"
acworkflow.js.logviewer.logEntries=Log entries
acworkflow.js.logviewer.token=Token
acworkflow.js.logviewer.node=Node
acworkflow.js.logviewer.actionDate=Action date
acworkflow.js.logviewer.errorNoLog=Log file can not be found
acworkflow.js.logviewer.flowChart.title=Token flow chart
acworkflow.js.logviewer.data.title=Data
acworkflow.js.logviewer.pleaseWait=Please wait

# Logviewer technical view
acworkflow.js.logviewtechnical.pleaseWait=Please wait...
acworkflow.js.logviewtechnical.noStepUi=Step ui could not be loaded due faulty ui definition
acworkflow.js.logviewtechnical.stepUi=Step ui
acworkflow.js.logviewtechnical.instanceInformation=Instance information
acworkflow.js.logviewtechnical.tokenInformation=Token information

# Logviewer comparison view
acworkflow.js.logviewcomparison.variable=Variable
acworkflow.js.logviewcomparison.changedBy=Changed by
acworkflow.js.logviewcomparison.previousValue=Previous value
acworkflow.js.logviewcomparison.currentValue=Current value
acworkflow.js.logviewcomparison.variableScope=Variable scope
acworkflow.js.logviewcomparison.changeType=Change type
acworkflow.js.logviewcomparison.changeInitiator=Change initiator
acworkflow.js.logviewcomparison.name=Name
acworkflow.js.logviewcomparison.owner=Owner
acworkflow.js.logviewcomparison.lastModifier=Last modifier
acworkflow.js.logviewcomparison.lastModifyDate=Last modify date
acworkflow.js.logviewcomparison.createDate=Create date
acworkflow.js.logviewcomparison.fileSize=File size
acworkflow.js.logviewcomparison.differenceData=Difference data
acworkflow.js.logviewcomparison.errorStepUi=Step ui could not be loaded due faulty ui definition
acworkflow.js.logviewcomparison.noAssignee=No assignee or assignee information is confidental
acworkflow.js.logviewcomparison.noStepUi=No step ui
acworkflow.js.logviewcomparison.noAttachment=No attachment or attachment is invalid
acworkflow.js.logviewcomparison.dateFormat=yyyy/MM/dd HH:mm:ss
acworkflow.js.logviewcomparison.pleaseWait=Please wait...

#Workflow repository
acworkflow.repository.load.objectNotFound=The provided id "$1" can not be found. Please ensure that you only provide existing ids
acworkflow.repository.save.objectNotFound=The provided id "$1" can not be found. Please ensure that you only provide existing ids
acworkflow.repository.set.keyStringError=The parameter key has to be of type string
acworkflow.repository.note.messageStringError=The parameter "message" has to be of type string
acworkflow.repository.note.targetNotFound=Target object can not be found

# configuration widgets (nodes)
# User/Group widget
acworkflow.js.assign.usergroupconfigelement.userGroup=User/Group
acworkflow.js.assign.usergroupconfigelement.attachment=Attachment permissions
acworkflow.js.assign.usergroupconfigelement.define=Set user/group assignment

# Assign configuration widget
acworkfloweditor.js.assignconfigurationaon.assignee=User/Groups (Editor)
acworkfloweditor.js.assignconfigurationaon.assignee.help=Sets the defined users / groups of the passing token as editors of the workflow step and all subsequent steps.
acworkfloweditor.js.assignconfigurationaon.assigneeLabel=User/Groups
acworkfloweditor.js.assignconfigurationaon.attachmentLabel=Attachment rights
# Viewer configuration widget
acworkfloweditor.js.assignconfigurationaon.viewer=Users/Groups (Viewer)
acworkfloweditor.js.assignconfigurationaon.viewer.help=Sets the defined users / groups as viewers of the workflow step and all subsequent steps. Viewers can only see the step in the user interface (read access), but cannot work with the workflow step themselves.
acworkfloweditor.js.assignconfigurationaon.viewerLabel=Users/Groups

# Collect configuration widget
acworkfloweditor.js.collectconfigurationaon.open=Open tokens
acworkfloweditor.js.collectconfigurationaon.done=Tokens done
acworkfloweditor.js.collectconfigurationaon.open.help=Defines how many tokens must still be present in the workflow so that the workflow is continued at this point with the next incoming token.
acworkfloweditor.js.collectconfigurationaon.done.help=Defines how many tokens must already be received in the node so that the workflow is continued at this point with the next incoming token.

# Condition configuration widget
acworkfloweditor.js.conditionconfigurationaon.condition=Condition
acworkfloweditor.js.conditionconfigurationaon.condition.help=Checks the set condition for true/false.

# Decision configuration widget
acworkfloweditor.js.decisionconfigurationaon.decision=Decision
acworkfloweditor.js.decisionconfigurationaon.decision.help=Decides depending on previously used variables, which outlet in the node should be accessed.

# Delay configuration widget
acworkfloweditor.js.delayconfigurationaon.seconds=Seconds
acworkfloweditor.js.delayconfigurationaon.minutes=Minutes
acworkfloweditor.js.delayconfigurationaon.hours=Hours
acworkfloweditor.js.delayconfigurationaon.days=Days
acworkfloweditor.js.delayconfigurationaon.months=Months
acworkfloweditor.js.delayconfigurationaon.years=Years

# Distribute configuration widget
acworkfloweditor.js.distributeconfiguration.distribute=From variable
acworkfloweditor.js.distributeconfiguration.into=Into variable
acworkfloweditor.js.distributeconfiguration.distribute.help=Defines from which variable the system reads the array.
acworkfloweditor.js.distributeconfiguration.into.help=Defines into which variable the system writes the array.

# Join configuration widget
acworkfloweditor.js.joinconfigurationaon.open=Open tokens
acworkfloweditor.js.joinconfigurationaon.done=Tokens done
acworkfloweditor.js.joinconfigurationaon.open.help=Defines how many tokens / paths still have to be present in the workflow so that the workflow is continued at this point with the next incoming token / path.
acworkfloweditor.js.joinconfigurationaon.done.help=Defines how many tokens/paths must already be received in the node so that the workflow is continued at this point with the next incoming token/path.


# Load configuration widget
acworkfloweditor.js.loadconfigurationaon.from=From
acworkfloweditor.js.loadconfigurationaon.filter=Filter
acworkfloweditor.js.loadconfigurationaon.into=Into variable
acworkfloweditor.js.loadconfigurationaon.from.help=Defines the objects from which the metadata should be read. IDs, UUIDs paths or other agorum core object ID variants can be specified. If this parameter is left empty, the attachments of the workflow will be taken automatically.
acworkfloweditor.js.loadconfigurationaon.filter.help=<p>Filters the collected metadata of the objects specified in the "source" parameter by name. A substring or a regex can be specified.</p><p>If a regex is specified, this must be inserted here as an expression as follows, example: <pre>#{/^name/}</pre></p><p>See also: <a href="https://agorumdocproxy.agorum.com/roiwebui/acds_module/overview2/index.html#/7a345050-e913-11e9-a3bc-005056aa0ecc/abd0a740-3f19-11e7-9fa3-005056aa0ecc/acds-anchor-9" target="_blank">common/metadata: filter</a></p>.
acworkfloweditor.js.loadconfigurationaon.into.help=<p>Defines the objects from which the metadata should be read. IDs, UUIDs paths or other agorum core object ID variants can be specified.</p><p>If the data is loaded from multiple objects, the intersection of all metadata of all objects is taken. I.e. only the data that is the same for all objects.</p><p>If this parameter is left empty, the attachments of the workflow will be taken automatically.</p>.

# Save configuration widget
acworkfloweditor.js.saveconfigurationaon.from=Source variable
acworkfloweditor.js.saveconfigurationaon.filter=Filter
acworkfloweditor.js.saveconfigurationaon.into=Target objects
acworkfloweditor.js.saveconfigurationaon.from.help=Defines from which workflow variable the metadata should be read.
acworkfloweditor.js.saveconfigurationaon.filter.help=<p>Filters the collected information from the "source variable" parameter. A substring or a regex can be specified.</p><p>If a regex is specified, this must be inserted as an expression as follows here, example: <pre>#{/^name/}</pre></p><p>See also: <a href="https://agorumdocproxy.agorum.com/roiwebui/acds_module/overview2/index.html#/7a345050-e913-11e9-a3bc-005056aa0ecc/abd0a740-3f19-11e7-9fa3-005056aa0ecc/acds-anchor-9" target="_blank">common/metadata: filter</a></p>
acworkfloweditor.js.saveconfigurationaon.into.help=Defines on which objects the variables / metadata should be written.

# Script configuration widget
acworkfloweditor.js.scriptconfiguration.valueArray=The value is an array.
acworkfloweditor.js.scriptconfiguration.valueObject=The value is an object.
acworkfloweditor.js.scriptconfiguration.rawEditor=Please edit with raw editor.
acworkfloweditor.js.scriptconfiguration.errorKey=Key already exists. Please use another key
acworkfloweditor.js.scriptconfiguration.errorBrackets=All opening brackets should be closed
acworkfloweditor.js.scriptconfigurationaon.key=Key
acworkfloweditor.js.scriptconfigurationaon.value=Value

# Set configuration widget
acworkfloweditor.js.setconfigurationaon.key=Key
acworkfloweditor.js.setconfigurationaon.value=Value
acworkfloweditor.js.setconfigurationaon.global=Global
acworkfloweditor.js.setconfigurationaon.global.text=Set value globally
acworkfloweditor.js.setconfigurationaon.key.help=Defines the name of a variable to be filled with a value. If the variable does not exist, it is created, otherwise it is adjusted.
acworkfloweditor.js.setconfigurationaon.value.help=Defines the value for a variable. If the variable exists, its value is replaced with the one used. Leave the value empty to delete the variable under "Key".
acworkfloweditor.js.setconfigurationaon.global.help=Defines whether the variable and its value should be made public. This means, the variable and its value can be used in other tokens, which did not pass the "save" node.

# Ui configuration widget
acworkfloweditor.js.uiconfigurationaon.assignee=User/Group
acworkfloweditor.js.uiconfigurationaon.assignee.label=User/Group (Editor)
acworkfloweditor.js.uiconfigurationaon.viewer=User/Group
acworkfloweditor.js.uiconfigurationaon.viewer.label=User/Group (Viewer)
acworkfloweditor.js.uiconfigurationaon.attachmentPermission=Attachment permission
acworkfloweditor.js.uiconfigurationaon.aguila=UI script
acworkfloweditor.js.uiconfigurationaon.assignee.help=Sets the defined users / groups of the passing token as agents of the workflow step and all subsequent steps.
acworkfloweditor.js.uiconfigurationaon.viewer.help=Sets the defined users / groups as viewers of the workflow step and all subsequent steps. Viewers can only see the step, but not edit it themselves.
acworkfloweditor.js.uiconfigurationaon.aguila.help=Creates a script for the UI that is displayed to the editor.
acworkfloweditor.js.uiconfigurationaon.outletVariable=Outlet variable
acworkfloweditor.js.uiconfigurationaon.outletVariable.help=Stores in the variable specified here the outlet via which the UI node was left.
acworkfloweditor.js.uiconfigurationaon.scopeVariable=Value variable
acworkfloweditor.js.uiconfigurationaon.scopeVariable.help=Defines the variable from which the values for the mask are to be loaded and stored again when saving. If no variable name is specified, the data is loaded directly from the workflow variables and saved in them.
acworkfloweditor.js.uiconfigurationaon.displayName=Display name
acworkfloweditor.js.uiconfigurationaon.displayName.help=<p>Defines the name that the system displays in the workflow. (In the respective lists)</p><p>This text will be translated automatically if translation is enabled for this workflow.</p>.
acworkfloweditor.js.uiconfigurationaon.description=Description
acworkfloweditor.js.uiconfigurationaon.description.placeHolder=Text
acworkfloweditor.js.uiconfigurationaon.description.help=<p>Defines the description that the system displays in the workflow. (In the corresponding lists)</p>
acworkfloweditor.js.uiconfigurationaon.events=Events
acworkfloweditor.js.uiconfigurationaon.events.help=Creates a script that is called when certain actions are performed in the UI (accept workflow, deliver workflow, save and exit workflow)


# Script configuration widget
acworkfloweditor.js.scriptconfigurationaon.enter=Enter script
acworkfloweditor.js.scriptconfigurationaon.update=Update script
acworkfloweditor.js.scriptconfigurationaon.enter.help=Will be executed as soon as the workflow reaches the node.
acworkfloweditor.js.scriptconfigurationaon.update.help=Is executed as soon as the wait state is resolved.

# configuration script editor
acworkfloweditor.js.configuration.scripteditor.add=Create script
acworkfloweditor.js.configuration.scripteditor.load=Load script
acworkfloweditor.js.configuration.scripteditor.delete=Delete script
acworkfloweditor.js.configuration.scripteditor.run=Run script
acworkfloweditor.js.configuration.scripteditor.open=Edit script in new tab
acworkfloweditor.js.configuration.scripteditor.scriptDeleteTitle=Attention
acworkfloweditor.js.configuration.scripteditor.scriptDeleteText=Do you really want to delete the script? (The script will only be deleted when the workflow is saved)
acworkfloweditor.js.configuration.scripteditor.searchScript=Search
acworkfloweditor.js.configuration.scripteditor.pickScript=Folder selection
acworkfloweditor.js.configuration.scripteditor.close=Close
acworkfloweditor.js.configuration.scripteditor.notMyScript=This script is an external script and therefore cannot be edited directly: "$1"

# Wait configuration widget
acworkfloweditor.js.waitconfigurationaon.resolve=Use a variable or an inline JavaScript
acworkfloweditor.js.waitconfigurationaon.targetDate=Target date
acworkfloweditor.js.waitconfigurationaon.targetDate.help=/agorum/roi/customers/acworkflow/repository/agorum/flow/wait/en.html

# comment
agorum.workflow.node.comment.description=Use this node to add comments to the process diagram.

# node groups
agorum.workflow.node.group.data=Data
agorum.workflow.node.group.flow=Flow
agorum.workflow.node.group.interaction=Interaction
agorum.workflow.node.group.common=Common
agorum.workflow.node.group.directSubWorkflows=Associated subworkflows

# node descriptions
agorum.workflow.node.data.load.description=Load metadata of objects/attachments and use them as workflow variables.
agorum.workflow.node.data.save.description=Save workflow variables as metadata on objects/attachment.
agorum.workflow.node.data.set.description=Set workflow variables.
agorum.workflow.node.flow.collect.description=Collect variable values from a previous "distribute" node.
agorum.workflow.node.flow.condition.description=Query conditions for further flow control (if).
agorum.workflow.node.flow.decision.description=Flow control (outlets) via a workflow variable or expression.
agorum.workflow.node.flow.delay.description=Wait (days, months, years, hours, minutes, seconds).
agorum.workflow.node.flow.distribute.description=Start parallel running steps, depending on an array variable.
agorum.workflow.node.flow.fork.description=Splitting into defined parallel steps.
agorum.workflow.node.flow.join.description=Waiting for the completion of several parallel running steps that have been split over a previous "fork".
agorum.workflow.node.flow.wait.description=Waiting for a date/time.
agorum.workflow.node.interaction.assign.description=Assign users/groups for all following steps (swimlane).
agorum.workflow.node.interaction.ui.description=Input mask for users and groups.
agorum.workflow.node.script.description=Executing JavaScript.

# start workflow ui
acworkflow.js.startworkflow.description=Choose the workflow that you want to start
acworkflow.js.startworkflow.workflow=Workflow
acworkflow.js.startworkflow.cancel=Cancel
acworkflow.js.startworkflow.start=Start
acworkflow.js.startworkflow.start.locked=One moment please ...
acworkflow.js.startworkflow.load.locked=Loading workflows...
acworkflow.asa.start=Start workflow (with selected object)
acworkflow.asa.group.workflow=Workflow
acworkflow.asa.main.start=Start workflow
acworkflow.asa.group.main.workflow=Workflow

# log viewer
acworkflow.js.log.title=History
acworkflow.js.log.hide=Show history
acworkflow.js.log.show=Hide history
acworkflow.js.log.date=Time
acworkflow.js.log.active=Status
acworkflow.js.log.stepDisplayName=Step
acworkflow.js.log.assigneeFullName=Editor
acworkflow.js.log.assigneesFullName=Assigned
acworkflow.js.log.processDisplayName=Process
acworkflow.js.log.loading=Loading, please wait...
acworkflow.js.log.active.true=Active
acworkflow.js.log.active.false=Finished
acworkflow.js.log.status.active=Active
acworkflow.js.log.status.killed=Canceled
acworkflow.js.log.status.finished=Finished

#
# workflow processes
#
acworkflow.overview.processes.title=Related workflow processes
acworkflow.overview.processes.noProcesses=No linked processes available
acworkflow.overview.processes.processDisplayName=Process
acworkflow.overview.processes.status=Status
acworkflow.overview.processes.createDate=Started on
acworkflow.overview.processes.lastModifyDate=Last modified
acworkflow.process.status.active=Aktiv
acworkflow.process.status.finished=Beendet

#
# acic
#
acworkflow.workflow.acic.workflowTasks=Workflow tasks
acworkflow.workflow.acic.workflowTasksDev=Workflow tasks (dev)
acworkflow.workflow.acic.workflowProcesses=Workflow processes

# parameter
acworkflow.editor.object.placeholder=agorum core object, e.g.: /agorum/roi/Files/Demo/Welcome.pdf
acworkflow.editor.filter.placeholder=Filter on metadata name (String or Regex), e.g.: #{/^test_/}
acworkflow.editor.outputVariable.placeholder=Variable name
acworkflow.editor.inputVariable.placeholder=Variable name
acworkflow.editor.variable.placeholder=Variable name
acworkflow.editor.string.placeholder=String or placeholder, z.B: ${nameOfVariable}
acworkflow.editor.positiveNumberOrEmpty.placeholder=Number > 0 or empty
acworkflow.editor.expression.condition.placeholder=Expression e.g.: token.variables.amount > 10000
acworkflow.editor.date.placeholder=Date
acworkflow.editor.text.placeholder=Text or placeholder, e.g.: ${nameOfVariable}
acworkflow.editor.displayName.placeholder=Text
acworkflow.editor.expression.placeholder=Expression




